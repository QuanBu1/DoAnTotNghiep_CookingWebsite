// src/pages/ToolCheckoutPage.js
import React, { useState, useEffect, useContext, useRef, useCallback } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import axios from 'axios';
import { Container, Row, Col, Card, Spinner, Alert, Button, Form } from 'react-bootstrap';
import AuthContext from '../context/AuthContext';
import { toast } from 'react-toastify';

const formatTime = (seconds) => {
    const mins = Math.floor(seconds / 60);
    const secs = seconds % 60;
    return `${mins}:${secs < 10 ? '0' : ''}${secs}`;
};

const ToolCheckoutPage = () => {
    const { orderId } = useParams();
    const navigate = useNavigate();
    const { token, user } = useContext(AuthContext);

    const [orderDetails, setOrderDetails] = useState(null);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState('');
    const [shippingAddress, setShippingAddress] = useState(user?.address || '');
    const [countdown, setCountdown] = useState(180);
    const [paymentStatus, setPaymentStatus] = useState(null);

    const pollingIntervalRef = useRef(null);

    const handleCancelOrder = useCallback(async () => {
        if (!token) return;
        try {
            const config = { headers: { Authorization: `Bearer ${token}` } };
            await axios.post(`/api/orders/tools/${orderId}/cancel`, {}, config);
            setPaymentStatus('cancelled');
            if (countdown <= 0) {
                toast.error("ƒê∆°n h√†ng ƒë√£ h·∫øt h·∫°n thanh to√°n v√† b·ªã h·ªßy t·ª± ƒë·ªông.");
            }
        } catch (err) {
            if (err.response?.status !== 400) {
                toast.error('Kh√¥ng th·ªÉ h·ªßy ƒë∆°n h√†ng. Vui l√≤ng ki·ªÉm tra l·∫°i.');
            }
        }
    }, [token, orderId, countdown]);

    const handleConfirmOrder = async (e) => {
        e.preventDefault();
        if (!shippingAddress || shippingAddress.trim() === '') {
            toast.error('Vui l√≤ng cung c·∫•p ƒë·ªãa ch·ªâ giao h√†ng h·ª£p l·ªá.');
            return;
        }
        
        setLoading(true);
        try {
            const config = { headers: { Authorization: `Bearer ${token}` } };
            const paymentMethod = orderDetails.payment_method;
            const body = { payment_method: paymentMethod, shipping_address: shippingAddress };
            
            // S·ª¨A L·ªñI 1: B·ªè `const res =` v√¨ kh√¥ng d√πng ƒë·∫øn
            await axios.put(`/api/orders/tools/${orderId}/confirm`, body, config);
            
            await fetchOrderDetails(); 
            toast.success("ƒê∆°n h√†ng ƒë√£ ƒë∆∞·ª£c x√°c nh·∫≠n th√†nh c√¥ng!");

        } catch (err) {
            toast.error(err.response?.data?.msg || 'L·ªói khi x√°c nh·∫≠n ƒë∆°n h√†ng.');
        } finally {
            setLoading(false);
        }
    };

    const handlePaymentMethodSelect = async (method) => {
        setOrderDetails(prev => ({ ...prev, payment_method: method }));
        try {
            const config = { headers: { Authorization: `Bearer ${token}` } };
            await axios.put(`/api/orders/tools/${orderId}/confirm`, { payment_method: method, shipping_address: shippingAddress }, config);
        } catch (err) {
            toast.error("L·ªói khi ch·ªçn ph∆∞∆°ng th·ª©c thanh to√°n.");
        }
    };

    const fetchOrderDetails = useCallback(async () => {
        if (!token) return;
        try {
            const config = { headers: { Authorization: `Bearer ${token}` } };
            const res = await axios.get(`/api/orders/tools/${orderId}`, config);
            
            setOrderDetails(res.data);
            setPaymentStatus(res.data.status);

            if (res.data.shipping_address) {
                setShippingAddress(res.data.shipping_address);
            }
        } catch (err) {
            setError(err.response?.data?.msg || 'Kh√¥ng th·ªÉ t·∫£i chi ti·∫øt ƒë∆°n h√†ng.');
        } finally {
            setLoading(false);
        }
    }, [orderId, token]);

    useEffect(() => {
        if (!token) {
            toast.error("Vui l√≤ng ƒëƒÉng nh·∫≠p.");
            navigate('/login');
            return;
        }
        fetchOrderDetails();
    }, [fetchOrderDetails, token, navigate]);

    useEffect(() => {
        if (paymentStatus === 'pending' && orderDetails?.payment_method === 'bank_transfer') {
            if (countdown <= 0) {
                handleCancelOrder();
                return;
            }
            const timer = setInterval(() => setCountdown(c => c - 1), 1000);
            return () => clearInterval(timer);
        }
    }, [countdown, paymentStatus, orderDetails?.payment_method, handleCancelOrder]);

    const pollStatus = useCallback(async () => {
        if (paymentStatus !== 'pending') return;
        try {
            const config = { headers: { Authorization: `Bearer ${token}` } };
            const res = await axios.get(`/api/orders/tools/${orderId}/status`, config);
            const newStatus = res.data.status;

            if (newStatus !== 'pending') {
                if (pollingIntervalRef.current) {
                    clearInterval(pollingIntervalRef.current);
                    pollingIntervalRef.current = null;
                }
                setPaymentStatus(newStatus);
                if (newStatus === 'confirmed') {
                    toast.success("Thanh to√°n ho√†n t·∫•t! ƒêang chuy·ªÉn h∆∞·ªõng...");
                    setTimeout(() => navigate('/orders/tools/history'), 2000);
                }
            }
        } catch (err) {
            console.error("L·ªói khi polling status", err);
        }
    }, [paymentStatus, token, orderId, navigate]);

    useEffect(() => {
        if (paymentStatus === 'pending' && orderDetails?.payment_method === 'bank_transfer' && !pollingIntervalRef.current) {
            pollingIntervalRef.current = setInterval(pollStatus, 3000);
        }
        return () => {
            if (pollingIntervalRef.current) {
                clearInterval(pollingIntervalRef.current);
                pollingIntervalRef.current = null;
            }
        };
    }, [paymentStatus, orderDetails?.payment_method, pollStatus]);

    if (loading) return <Container className="text-center my-5"><Spinner animation="border" /></Container>;
    if (error) return <Container className="my-5"><Alert variant="danger">{error}</Alert></Container>;
    if (!orderDetails) return null;
    
    // S·ª¨A L·ªñI 2: X√≥a b·ªè bi·∫øn kh√¥ng d√πng ƒë·∫øn
    // const isAwaitingSelection = paymentStatus === 'pending_selection'; 
    const isAwaitingBankTransfer = paymentStatus === 'pending' && orderDetails.payment_method === 'bank_transfer';
    const isConfirmedByCOD = paymentStatus === 'confirmed' && orderDetails.payment_method === 'cod';
    const isSuccess = paymentStatus === 'confirmed' || paymentStatus === 'shipped' || paymentStatus === 'completed';
    const isCancelled = paymentStatus === 'cancelled';
    
    const paymentDescription = orderDetails.temp_transaction_code || `TOOL${orderId}`;
    const qrCodeUrl = `https://qr.sepay.vn/img?bank=MBBank&acc=0372122362222&template=compact&amount=${parseInt(orderDetails.total_amount)}&des=${encodeURIComponent(paymentDescription)}`;
    
    return (
        <Container className="my-5">
            <Row className="justify-content-center">
                <Col lg={9}>
                    <h2 className="text-center mb-4">üõí Thanh To√°n ƒê∆°n H√†ng D·ª•ng C·ª• #{orderId}</h2>
                    
                    {isSuccess && (
                        <Alert variant="success" className="text-center p-4">
                            <h2>ƒê∆°n h√†ng ƒë√£ ƒë∆∞·ª£c x√°c nh·∫≠n!</h2>
                            <p>C·∫£m ∆°n b·∫°n ƒë√£ mua h√†ng. Ch√∫ng t√¥i s·∫Ω x·ª≠ l√Ω ƒë∆°n h√†ng c·ªßa b·∫°n s·ªõm nh·∫•t c√≥ th·ªÉ.</p>
                            <Button variant="success" onClick={() => navigate('/orders/tools/history')}>Xem l·ªãch s·ª≠ ƒë∆°n h√†ng</Button>
                        </Alert>
                    )}
                    
                    {isCancelled && (
                        <Alert variant="danger" className="text-center p-4">
                            <h2>ƒê∆°n h√†ng ƒë√£ b·ªã H·ª¶Y</h2>
                            <p>ƒê∆°n h√†ng ƒë√£ h·∫øt h·∫°n ho·∫∑c b·ªã b·∫°n h·ªßy. Vui l√≤ng t·∫°o ƒë∆°n h√†ng m·ªõi.</p>
                            <Button variant="danger" onClick={() => navigate('/kitchen-tools')}>Quay l·∫°i c·ª≠a h√†ng</Button>
                        </Alert>
                    )}
                    
                    { !isSuccess && !isCancelled && (
                    <Card className="shadow-lg">
                        <Card.Header as="h4" className="bg-primary text-white">Chi ti·∫øt ƒê∆°n h√†ng</Card.Header>
                        <Card.Body>
                            <Row>
                                <Col md={6} className="border-end mb-3">
                                    <h5 className="mb-3">1. Th√¥ng tin Giao h√†ng</h5>
                                    <Form onSubmit={handleConfirmOrder}>
                                        <p><strong>Ng∆∞·ªùi nh·∫≠n:</strong> {user?.full_name}</p>
                                        <Form.Group className="mb-3" controlId="shippingAddress">
                                            <Form.Label><strong>ƒê·ªãa ch·ªâ Giao h√†ng:</strong></Form.Label>
                                            <Form.Control 
                                                as="textarea" rows={3}
                                                value={shippingAddress}
                                                onChange={(e) => setShippingAddress(e.target.value)}
                                                required
                                            />
                                        </Form.Group>
                                    </Form>
                                    <hr />
                                    <h5 className="mb-3">Chi ti·∫øt S·∫£n ph·∫©m</h5>
                                    {orderDetails.items?.map((item, index) => (
                                        <div key={index} className="d-flex justify-content-between mb-1">
                                            <span>{item.name} x {item.quantity}</span>
                                            <span>{new Intl.NumberFormat('vi-VN').format(item.subtotal)} VND</span>
                                        </div>
                                    ))}
                                    <hr />
                                    <div className="d-flex justify-content-between h5">
                                        <strong>T·ªïng c·ªông:</strong>
                                        <strong className="text-danger">{new Intl.NumberFormat('vi-VN').format(orderDetails.total_amount)} VND</strong>
                                    </div>
                                </Col>

                                <Col md={6}>
                                    <h5 className="mb-3">2. Ph∆∞∆°ng th·ª©c Thanh to√°n</h5>
                                    
                                    {isAwaitingBankTransfer && (
                                         <Alert variant="warning" className="text-center">
                                            ƒê∆°n h√†ng s·∫Ω h·∫øt h·∫°n sau: <strong className="h5">{formatTime(countdown)}</strong>
                                        </Alert>
                                    )}

                                    <div className="d-grid gap-2">
                                        <Button 
                                            variant={orderDetails.payment_method === 'cod' ? 'success' : 'outline-secondary'} 
                                            onClick={() => handlePaymentMethodSelect('cod')}
                                            disabled={isAwaitingBankTransfer}
                                        >
                                            Thanh to√°n khi nh·∫≠n h√†ng (COD)
                                        </Button>
                                        <Button 
                                            variant={orderDetails.payment_method === 'bank_transfer' ? 'success' : 'outline-secondary'} 
                                            onClick={() => handlePaymentMethodSelect('bank_transfer')}
                                            disabled={isConfirmedByCOD}
                                        >
                                            Chuy·ªÉn kho·∫£n Ng√¢n h√†ng
                                        </Button>
                                    </div>
                                    
                                    {isConfirmedByCOD && (
                                        <Alert variant='info' className="mt-3 text-center">ƒê∆°n h√†ng c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c x√°c nh·∫≠n, ch√∫ng t√¥i s·∫Ω s·ªõm li√™n h·ªá ƒë·ªÉ giao h√†ng.</Alert>
                                    )}

                                    {isAwaitingBankTransfer && (
                                        <Card body className="mt-3 border-success text-center">
                                            <img src={qrCodeUrl} alt="QR Code" style={{ maxWidth: '200px' }} className="mx-auto d-block mb-2" />
                                            <p className="mb-1"><strong>Ng√¢n h√†ng:</strong> MBBank</p>
                                            <p className="mb-1"><strong>S·ªë t√†i kho·∫£n:</strong> 0372122362222</p>
                                            <p className="text-danger">
                                                <strong>N·ªôi dung (B·∫ÆT BU·ªòC):</strong> <strong className='text-primary'>{paymentDescription}</strong>
                                            </p>
                                            <Button variant="outline-danger" size="sm" className="mt-2" onClick={handleCancelOrder}>H·ªßy thanh to√°n</Button>
                                        </Card>
                                    )}
                                </Col>
                            </Row>
                        </Card.Body>
                    </Card>
                    )}
                </Col>
            </Row>
        </Container>
    );
};

export default ToolCheckoutPage;