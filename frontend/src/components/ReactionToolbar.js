// src/components/ReactionToolbar.js
import React, { useState } from 'react';
import { Button } from 'react-bootstrap';
import './ReactionToolbar.css';

const ReactionToolbar = ({ reactions = {}, userReactions = [], onReact }) => {
    const [isPopoverVisible, setPopoverVisible] = useState(false);
    let popoverTimeout; // Bi·∫øn ƒë·ªÉ qu·∫£n l√Ω ƒë·ªô tr·ªÖ khi ·∫©n pop-up

    const availableReactions = {
        like: 'üëç',
        heart: '‚ù§Ô∏è',
        haha: 'üòÇ',
        wow: 'üòÆ',
        sad: 'üò¢',
        angry: 'üò°',
    };

    const handleMouseEnter = () => {
        clearTimeout(popoverTimeout);
        setPopoverVisible(true);
    };

    const handleMouseLeave = () => {
        // Th√™m m·ªôt ƒë·ªô tr·ªÖ nh·ªè tr∆∞·ªõc khi ·∫©n ƒë·ªÉ ng∆∞·ªùi d√πng c√≥ th·ªÉ di chu·ªôt v√†o pop-up
        popoverTimeout = setTimeout(() => {
            setPopoverVisible(false);
        }, 300);
    };

    const handleReactionSelect = (reactionType) => {
        onReact(reactionType);
        setPopoverVisible(false);
    };

    // X√°c ƒë·ªãnh c·∫£m x√∫c ch√≠nh m√† ng∆∞·ªùi d√πng ƒë√£ ch·ªçn (n·∫øu c√≥)
    const primaryUserReaction = userReactions.length > 0 ? userReactions[0] : null;

    return (
        <div className="fb-reaction-container" onMouseLeave={handleMouseLeave}>
            {/* Pop-up ch·ª©a c√°c emoji */}
            {isPopoverVisible && (
                <div className="fb-reaction-popover" onMouseEnter={handleMouseEnter} onMouseLeave={handleMouseLeave}>
                    {Object.entries(availableReactions).map(([type, emoji]) => (
                        <span key={type} className="popover-emoji" onClick={() => handleReactionSelect(type)}>
                            {emoji}
                        </span>
                    ))}
                </div>
            )}

            {/* N√∫t "Th√≠ch" ch√≠nh */}
            <Button
                variant="link"
                className={`like-button ${primaryUserReaction ? 'reacted ' + primaryUserReaction : ''}`}
                onMouseEnter={handleMouseEnter}
                onClick={() => handleReactionSelect(primaryUserReaction ? primaryUserReaction : 'like')} // H√†nh ƒë·ªông m·∫∑c ƒë·ªãnh: b·∫•m l√† "like"
            >
                {primaryUserReaction ? (
                    <>
                        <span className="reacted-emoji">{availableReactions[primaryUserReaction]}</span>
                        {/* Vi·∫øt hoa ch·ªØ c√°i ƒë·∫ßu */}
                        {primaryUserReaction.charAt(0).toUpperCase() + primaryUserReaction.slice(1)}
                    </>
                ) : (
                    <>
                        <i className="bi bi-hand-thumbs-up me-2"></i> Th√≠ch
                    </>
                )}
            </Button>
        </div>
    );
};

export default ReactionToolbar;